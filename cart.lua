-- title:  game title
-- author: game developer
-- desc:   short description
-- script: lua

----------------------------------------------------------------------------------------------------------------------------------------
--CODE FROM HERE------------------------------------------------------------------------------------------------------------------------
t = 0
UIENABLED = 1


--Sky color offset----------------------------------------

middayOffset = {-0x43, -0x5A, -0x0D}
sunsetOffset = {0xCF, -0x40, -0xBA}
currDayStage = -8
function changePallette(targetDayStage)-- -8 is morning (regular colors) 0 midday 7 is sunset
    while currDayStage > targetDayStage and currDayStage > -7 do
        if currDayStage > 0 then --[0:7]
            poke(0x3fc0 + (11 * 3), peek(0x3fc0 + 11*3) - (sunsetOffset[1] / 8))
            poke(0x3fc0 + (11 * 3 + 1), peek(0x3fc0 + 11*3 + 1) - (sunsetOffset[2] / 8))
            poke(0x3fc0 + (11 * 3 + 2), peek(0x3fc0 + 11*3 + 2) - (sunsetOffset[3] / 8))
        elseif currDayStage > -8 then --[-8 : -1]
            poke(0x3fc0 + (11 * 3), peek(0x3fc0 + 11*3) - (middayOffset[1] / 8))
            poke(0x3fc0 + (11 * 3 + 1), peek(0x3fc0 + 11*3 + 1) - (middayOffset[2] / 8))
            poke(0x3fc0 + (11 * 3 + 2), peek(0x3fc0 + 11*3 + 2) - (middayOffset[3] / 8))
        end
        currDayStage = currDayStage - 1
    end

    while currDayStage < targetDayStage and currDayStage < 6 do
        if currDayStage < 0 then --[-8:-1]
            poke(0x3fc0 + (11 * 3), peek(0x3fc0 + 11*3) + (middayOffset[1] / 8))
            poke(0x3fc0 + (11 * 3 + 1), peek(0x3fc0 + 11*3 + 1) + (middayOffset[2] / 8))
            poke(0x3fc0 + (11 * 3 + 2), peek(0x3fc0 + 11*3 + 2) + (middayOffset[3] / 8))
        elseif currDayStage < 7 then --[0-7]
            poke(0x3fc0 + (11 * 3), peek(0x3fc0 + 11*3) + (sunsetOffset[1] / 8))
            poke(0x3fc0 + (11 * 3 + 1), peek(0x3fc0 + 11*3 + 1) + (sunsetOffset[2] / 8))
            poke(0x3fc0 + (11 * 3 + 2), peek(0x3fc0 + 11*3 + 2) + (sunsetOffset[3] / 8))
        end
        currDayStage = currDayStage + 1
    end

    targetDayStage = currDayStage
end

targetDayStage = -8
function SkyUpdate()
    if keyp(61) then --7
        targetDayStage = currDayStage + 1
        changePallette(targetDayStage)
    elseif keyp(60) then
        targetDayStage = currDayStage - 1
        changePallette(targetDayStage)
    end    
end

--Menu----------------------------------------

--scene:
	--0 -> Game scene
	--1 -> Shop
	--2 -> Victory screen
	--3 -> Lost screen
--running: 0->paused | 1->running
--level: level id
GameState = {scene = 0, running = 1, level = 0}

function GameState.update()
	if (GameState.scene == 0) then	--game scene
		
		if (keyp(16)) then 	--P for pause
			GameState.running = (GameState.running + 1) % 2
			actionGameScene(GameState.running)
		end
		
		if(Player.fireState == 2 and GameState.level < 4) then 	--before last level
			resetGameScene()
			GameState.level = GameState.level + 1
		elseif(Player.fireState == 2 and GameState.level == 4) then--last level and won
			resetGameScene()
			GameState.scene = 2
		elseif (Player.fireState > 2 or Player.fireState == 1) then	--died
			resetGameScene()
			GameState.scene = 3
		end

	elseif (GameState.scene == 1)	then--shop
		actionGameScene(0)
		resetGameScene(0)


	else 									--victory/losing screen
		actionGameScene(0)
		resetGameScene(0)
		if (keyp(19)) then --PLACEHOLDER for restart
			GameState.level = 0
			GameState.scene = 0
			actionGameScene(1)
		end

	end
end

function GameState.draw()
	if(GameState.scene == 0) then
		print("Game scene", 60, 80)
		pressSpaceUI()
		if(GameState.running == 0) then
			pauseMenu()
		end

		if (GameState.level == 0) then
			--map()
			print("Level 0", 60, 60)
		elseif (GameState.level == 1) then
			print("Level 1", 60, 60)
		elseif (GameState.level == 2) then
			print("Level 2", 60, 60)
		elseif (GameState.level == 3) then
			print("Level 3", 60, 60)
		elseif (GameState.level == 4) then
			print("Level 4", 60, 60)
		end

	elseif (GameState.scene == 1) then
		print("Shop", 60, 80)
	elseif (GameState.scene == 2) then
		print("Victory", 60, 80)
		print("Press S to restart", 60, 100)
	elseif (GameState.scene == 3) then
		print("Lost", 60, 80)
		print("Press S to restart", 60, 100)
	end    
end

active = 0
function pressSpaceUI()
    y = 120-50
    x = 68-10
    l = 10
    w = 50

    text = "SPACE"

    if t%16 == 0 then
        active = (active +1) %2
    end

    if(active == 0) then
        rect(x, y, w, l, 14)
        rect(x, y+l, w, l/2, 15)
        print(text, x+w/2-(#text*3), y+1)
    else
        rect(x, y + l/2, w, l, 14)
        rect(x, y+l + 3*l/8, w, l/4, 15)
        print(text, x+w/2-(#text*3), y+1 + l/2)
    end
end

function pauseMenu()
    rect(60, 34, 120, 68, 3) --menu background -- brown?
    rectb(60, 34, 120, 68, 4) --menu border --white
    print("PAUSED", 102, 50)
    unpauseMess = "Press 'p' to unpause"
    print(unpauseMess, 120 - ((#unpauseMess-2) * 3), 78)
end

--Duel mechanics------------------------------------------------------
--Player----------------------------------------
opponents = { --may need overwritten visual options
    {"Old McDuff", 30},
    {"Senile Ms Johnson", 29},
    {"\"Not so old\" Jack", 27},
    {"Crooked John", 25},
    {"Doc Richard", 23},
    {"\"Young\" Galen Young", 21},
    {"\"Fastest gun in the west\"", 19},
    {"The silver rider", 17}
}

--fireState: 0 (hasn't fired) / 1 (fired before time) / 2 (fired before opponent) / 3 (fired after opponent) / 4 shot at before shooting
Player = {enabled = 1, reactionSpeed = 0, fireState = 0} 
Semaphore = {enabled = 1, initDelay = 120, wasActivated = 0, currTime = 0, opponentHasFired = 0, opponentTime = 25}

function Player.init()
    Player.reactionSpeed = 0
    Player.fireState = 0
end

function Player.update()
    if Player.enabled == 1 then 
        if keyp(48) and Player.fireState == 0 then --spacebar
            if Semaphore.wasActivated == 1 then
                if Semaphore.opponentHasFired == 1 then
                    Player.fireState = 3 -- fired after opponent
                else
                    Player.fireState = 2 -- fired before opponent
                end
            else
                Player.fireState = 1 --before time
            end
        end
    end
end 

function Player.draw()
    if Player.enabled == 1 then
        print("Fire state:", 0 , 0)
        
        if Player.fireState == 0 then        -- not yet
            print("hasn't shot", 64, 0)
        elseif Player.fireState == 1 then        --early
            print("shot before time!", 64, 0)
        elseif Player.fireState == 2 then   -- on time
            print("shot on time!", 64, 0)
        elseif Player.fireState == 3 then  -- late (state 3)
            print("shot too late...", 64, 0)
        else --shot timeout (state 4)
            print("Not quick enought!", 64, 0)
        end 

        print(Player.reactionSpeed, 164, 0)

        print(targetDayStage, 164, 64) --for sky debug --to remove
    end
end

--Semaphore----------------------------------------

function Semaphore.init()
    Semaphore.initDelay = math.random(60, 180)
    Semaphore.wasActivated = 0
    Semaphore.currTime = 0
	Semaphore.opponentHasFired = 0
end

function Semaphore.update()
    if Semaphore.enabled == 1 then --maybe only allow stopping if not in duel?
        if Semaphore.wasActivated == 0 and Semaphore.initDelay < Semaphore.currTime then
            Semaphore.wasActivated = 1
            Semaphore.currTime = 0
            --also change visual queue
        else
            Semaphore.currTime = Semaphore.currTime + 1
        end

        if Semaphore.wasActivated == 1 and Player.fireState == 0 then
            Player.reactionSpeed = Player.reactionSpeed + 1
            if Player.reactionSpeed > Semaphore.opponentTime then
                Semaphore.opponentHasFired = 1
            end
            if(Player.reactionSpeed > Semaphore.opponentTime + 10) then --if player shot timed out --should be around 10
                Player.fireState = 4
            end
        end 
    end
end

function Semaphore.draw()
    if(Semaphore.enabled == 1) then
        --show visual queue
        if Semaphore.wasActivated == 0 then
            print("Don't", 0 , 24)
        else
            print("Fire!", 0, 24)
        end

        print(Semaphore.currTime, 128, 64)
    end
end

function resetGameScene()
	Semaphore.init()	
	Player.init()
end

function actionGameScene(p)
	Semaphore.enabled = p
	Player.enabled = p
end


dollars = 0
shoppingList = { --bought, name, price, sprite?
    {0, "Gun 1", 5},
    {0, "Gun 2", 10},
    {0, "Gun 3", 15},
    {0, "Gun 4", 20},
    {0, "Gun 5", 25},
    {0, "Gun 6", 30},
    {0, "Gun 7", 35},
    {0, "Gun 8", 40},
    {0, "Gun 9", 45},
}

shopMenu = {capacity = 4, topmostIndex = 1, selectedIndex = 1, canScrollUp = 0, canScrollDown = 0} 
--shopMenu
    --capacity: how many are shown at a time
    --selectedIndex: what item is currently selected 


function shopMenu.update()
    if keyp(2) then--b to buy
        --verify if got money
    elseif keyp(58) then --up scroll
        if(shopMenu.topmostIndex == shopMenu.selectedIndex and shopMenu.topmostIndex > 1) then--scroll up
            shopMenu.topmostIndex = shopMenu.topmostIndex - 1
            shopMenu.selectedIndex = shopMenu.selectedIndex - 1
        elseif shopMenu.selectedIndex > 1 then
            shopMenu.selectedIndex = shopMenu.selectedIndex - 1
        end
    elseif keyp(59) then --down scroll
        if((shopMenu.topmostIndex + shopMenu.capacity) == shopMenu.selectedIndex and  shopMenu.selectedIndex < #shoppingList) then
            shopMenu.topmostIndex = shopMenu.topmostIndex + 1
            shopMenu.selectedIndex = shopMenu.selectedIndex + 1
        elseif shopMenu.selectedIndex < #shoppingList then
            shopMenu.selectedIndex  = shopMenu.selectedIndex + 1;
        end
    end
end

function shopMenu.draw()
    rect(60, 17, 120, 90, 3) --menu background -- brown?
    rectb(60, 17, 120, 90, 4) --menu border --white
    print("SHOP", 120, 25)
    if(shopMenu.topmostIndex > 1) then --if can be scrolled up
        print("/\\", 120-#"/\\"*3+2, 35)
    end

    for i = 0, shopMenu.capacity do
        if i + shopMenu.topmostIndex <= #shoppingList then
            print(shoppingList[i+shopMenu.topmostIndex][2], 120 - #shoppingList[i+shopMenu.topmostIndex][2] * 3 + 2, 45 + 10* i)
            --add sprite
        end
    end

    print(">", 64, 45 + (shopMenu.selectedIndex - shopMenu.topmostIndex) * 10)

    if(shopMenu.topmostIndex < #shoppingList-shopMenu.capacity) then --if can be scrolled up
        print("\\/", 120-#"\\/"*3+2, 95)
    end

    print(shopMenu.capacity, 0, 25)
    print(shopMenu.topmostIndex, 0, 35)
    print(shopMenu.selectedIndex, 0 , 45)
    print(#shoppingList, 0, 55)
end

--CODE UNTIL HERE-------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------

Engine = {
	_init = {Semaphore.init, Player.init}, 
	_update = {shopMenu.update},--{SkyUpdate, Semaphore.update, Player.update, GameState.update}, 
	_draw = {shopMenu.draw},--{Semaphore.draw, Player.draw, shopMenu.draw}, 
	_uidraw = {}--GameState.draw}
}

function Engine:init()
	if self._init == nil then
		return
	end
	for i=1, #self._init do
		self._init[i]()
	end
end

function Engine:update()
	if self._update == nil then
        return
    end
	for i = 1, #self._update do
		self._update[i]() 
    end
end

function Engine:draw()
	cls(11)
    
	--map((Level.LevelNumber%8)*30,  Level.reflected*17 + Level.LevelNumber//8*34)
	if self._draw == nil then
		return
	end
	for i = 1, #self._draw do
		self._draw[i]()
	end
end

function Engine:uidraw()
	if UIENABLED then
		if self._uidraw == nil then
			return
		end
		for i = 1, #self._uidraw do
			self._uidraw[i]()
		end
	end
end

function Engine:onCicleEnd()
	--debug()


	--Atualização de variáveis
	t=t+1
end

function TIC()
	if(t == 0) then
		Engine:init()
	end	
	Engine:update()
	Engine:draw()
	Engine:uidraw()
	Engine:onCicleEnd()
end

-- <TILES>
-- 001:44444444444444444444444a4a4444aa4444a44a4a444444444444444444444a
-- 002:4444444444444444444aaa444a4444444444a4444a44444444aaa4444444444a
-- 003:444aaa44444444a4a44444444a4444444444a4aa4a444444444aa44444a4444a
-- 004:bbbbbbbbbbbbcbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbb
-- 005:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 006:bbbbbbccbbbbbbbbbcbbbbbbccbbbbbbbbbbbbbbbbbbccbbbbbbcccbbbccccbb
-- </TILES>

-- <SPRITES>
-- 000:000000000000044400004444400044440444444400002222000033330003333f
-- 001:000000004000000044000000444000044444444422200000333000003f300000
-- 002:000000000000044400004444000044440004444400044222004423330442333f
-- 003:000000004000040044000040444444004444400022200000333000003f300000
-- 004:000000000400044400004444000044440004444400042222044233f34423333f
-- 005:000004004000004044004440444444004444400022240000f3f000003f300000
-- 016:00033333000033330200233f0022222200021122002211120011111200111111
-- 017:3330000033300000ff3000002222000022220000222210002222110022221100
-- 018:44033333000033f30000233f0022222200021122002211120201111200111111
-- 019:3330000033300000ff3000002222000022220000222110002222210022221110
-- 020:004333f3000033330200233f0022222200021121012211120011111201111111
-- 021:f3f0000033300000ff3000002222001022222000212210001222211022221111
-- 032:0011111100111121001111210011112100111121001111210003331100033888
-- 033:1222111011111210111112101111121011111330111113301111100089999000
-- 034:0011111100111111004111210001113100011133000141330000881100008848
-- 035:1221111111111111111110111111103331111033311110001111100089999000
-- 036:0111111101111211011112110111121100111211000331110003331100033888
-- 037:12211211111110111f1120331211103322111000112110001111100089999000
-- 048:0003388800008888000088880000888000008880000088800008888000088880
-- 049:8999900089999900899999000009990000099900000999000009990000099999
-- 050:0004888800008888000088880000888000008880000088800008888000088880
-- 051:8999900089999900899999000009990000099900000999000009990000099999
-- 052:0000388800008888000088880000888800088880008888800088888000888888
-- 053:8999900089999000899990000009900000099000000999000009999000099990
-- 064:00000000000008880000888880009999088888880000dddd0000d3330003d33f
-- 065:0000000080000000880000009990000888888888ddd00000333d00003f3d0000
-- 066:000000000000088800008889000089990008988800088ddd0088d3330883d33f
-- 067:0000000080000800990000809888880088888000ddd00000333000003f300000
-- 068:00000000080008880000888900008999000898880008ddd2088d3323882d333f
-- 069:00000800800000809900888098888800888880002dd80000f3f000003f300000
-- 070:00000000000004440000444404004444004444440000aaaa0000a3330003d33f
-- 071:0000000040000000440000004440040044444000aaa00000333000003f300000
-- 072:000000000000044400004444000044440004444400044aaa0044a3330443d33f
-- 073:0000000040000000440004004444440044444000aaa00000333000003f300000
-- 074:00000000000004440000444400004444000444440004aaa2444a3323442d333f
-- 075:00000000400000004400040044444400444440002aa40000f3f000003f300000
-- 080:0003d3330000dddd00000ddf00000ddd000088dd000888dd008888dd0088888d
-- 081:33300000dddd0000ffdd0000dddd0000ddd80000ddd880008dd88800d8d88800
-- 082:8803d3330000ddfd00000ddf00000ddd000088dd000888dd000888dd0088888d
-- 083:33300000ddd00000ffd00000ddd00000ddd80000ddd880008dd88800d8d88880
-- 084:008d33f3000ddddd0000dddf0000dd2200d88ddd000ddddd2088ddd208888888
-- 085:f3f00000ddd00000ffd00000ddd00000ddd800002ddddd0082ddd88022228888
-- 086:0003d3330000dddd00000ddf00000ddd00004444000444440033344400333444
-- 087:33300000dddd0000ffdd0000dddd000044440000444430004144330044444300
-- 088:0003d3330000ddfd00000ddf00000ddd0000444d000444440003444400333444
-- 089:33300000ddd00000ffd00000ddd00000dd440000444440004144430044444330
-- 090:000d33f3000ddddd0000dddf0000dd2220000ddd000d44440233444403334444
-- 091:f3f00000ddd00000ffd00000ddd00000ddd00000444230001444433044444333
-- 096:00888888008888f8008888f8008888f8008888f8001111f80003338800033999
-- 097:8888888088888880888888808888811088888330888883308888800094499000
-- 098:0088888800888888004888880008883800088833000848330000998800009949
-- 099:8888888888888888888880888888803338888033388880008888800094499000
-- 100:0888888808888288088882880888828800888288000338880003338800033999
-- 101:82288288888880888f8820338288803322888000882880008888800044999000
-- 102:0033344400333444003334440033344400333444001114440003334400033aaa
-- 103:44444330441444304444433044444110444443304414433044444000a44aa000
-- 104:003334440033344400333444003334340003313300033133000044440000aaaa
-- 105:44444333441443334444403344444011344440333414400044444000a44aa000
-- 106:0332444403324444032344440333444400334444000114440003334400033aaa
-- 107:444443334f444011424420332244203342244000414440004444400044aaa000
-- 112:0003399900009999000099990000999000009990000089900008888000088880
-- 113:9999900099999900999999000009990000099900000998000008880000088880
-- 114:0004999900009999000099990000999000009990000089900008888000088880
-- 115:9999900099999900999999000009990000099900000999000008880000088880
-- 116:0000399900009999000099990000999000089990008889900088899000888880
-- 117:9999900099999000999990000009900000099000000888000008888000088880
-- 118:0003399900009999000099990000999000009990000089900008888000088880
-- 119:9999900099999900999999000009990000099900000998000008880000088880
-- 120:0004999900009999000099990000999000009990000089900008888000088880
-- 121:9999900099999900999999000009990000099900000999000008880000088880
-- 122:0000399900009999000099990000999000089990008889900088899000888880
-- 123:9999900099999000999990000009900000099000000888000008888000088880
-- 176:aaffa00eaaaaa00eacfcf00eac444440cc40000acc44444acc00000acc00000e
-- 177:00000000deddeeeeeeeee000aa0e0000aaee0000a0000000e0000000e0000000
-- 178:daaaa0aade00aa0a00e004a0000e0a4a0000e00a004a0e0004a400e00a40000e
-- 179:a0000000a0000000a000000000000000a0000000a0000000a0000000a0000000
-- 192:0e000000deeeddeeeeeeee00022e0e00222ee0002200000022000000dd000000
-- 193:01000000ee00000c000000cd000e0cde0000ede0000b9e0000b980e000980000
-- 194:cc000000dd00d000e00eeeee000ddddd000edaaa00dde4a400de000000e00000
-- 195:00000000d0000000ee000000dd00000000000000000000000000000000000000
-- 208:c2f2222cc2222f2cc222222c522f22255c2222c565cccc567666666777777777
-- 209:0076650007655650765765656566565576767767070760700006500000075000
-- 210:00000075000007570000757000f7570000ff7000aa2ff000a0a00000aaa00000
-- </SPRITES>

-- <MAP>
-- 000:505050505050505050505050505050505050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:505050505050505050505050506050505050405050604050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:405050406050504050605050505040405050505050505050506050405050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:504050505040505050605040505050505040504050505050405050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:505050405050506050505050505060505050505050605050405050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:505050506050504050505050405040505050505040505050505050405050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:504050505050505050504050505050605050505050505050504050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:101020101010201010101020101010101010101020101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:102010101020101020101010202010201010201010101010101020101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:101010101010101010101010101010101010101020101020201010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:101020101020101010102010101010101020201010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:101010101010101020101010101010101010102010202010201010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:101010101020101010102010102010201010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:102010301030101020102020102020102020102020102020301020201020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:101010203010102010301010201020101010101020301010301030102010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:101020103010202010201010301010103010302010103010201010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:203010203010101020101010201020103020101030101010101010103010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:07c007c007d007f007f007f007c007c007b007900780077007600750173027203710470057006700770087009700a700a700b700d700e700f700f700302000000000
-- 001:f200f200f20042b502f602f702f722e732b68293e251e210f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f200369000000000
-- 002:04e004d004d004d004c004b0049004900490049004800480047004600460045004400430042004100400040004000400040004000400040004000400204000000c00
-- 003:f000f000f000f000f000f000f000f000c010901060305030404040504050407040704080409040a050b050c060b070c090e0c0e0d0f0f000f000f000604000000000
-- 004:61e061e061e061e061e071e071c081b08190817091409110a100b100c100e100f100f100f100f100f100f100f100f100f100f100f100f100f100f100604000000000
-- 005:f000f000f01070207050707070a070c070c070907060c040d020e010f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000704000000000
-- 006:f300f300f3000300031003300350038003b003d003f003f003f003f003f003e003b00390036003400320f310f300f300f300f300f300f300f300f300105000000000
-- 016:06c006c006d006f006f006f006c006c006b006900680067006600650163026203610460056006600760086009600a600a600b600d600e600f600f600302000000000
-- </SFX>

-- <TRACKS>
-- 000:180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:180301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS>

-- <PALETTE>
-- 000:0418205d275db13e53eec6beffcd75a7f07038b76425717929366f3b5dc9753c0873eff7f4f4f494b0c2566c86000404
-- </PALETTE>

